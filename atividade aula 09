import numpy as np

def initialize_swap_matrix():
    swap_matrix = np.zeros((100, 6))
    swap_matrix[:, 0] = np.arange(100)  # N
    swap_matrix[:, 1] = np.arange(1, 101)  # I
    swap_matrix[:, 2] = np.random.randint(1, 51, size=100)  # D
    swap_matrix[:, 3] = 0  # R
    swap_matrix[:, 4] = 0  # M
    swap_matrix[:, 5] = np.random.randint(100, 10000, size=100)  # T
    return swap_matrix

def initialize_ram_matrix(swap_matrix):
    ram_matrix = np.zeros((10, 6))
    for i in range(10):
        random_index = np.random.randint(0, 100)
        ram_matrix[i, :] = swap_matrix[random_index, :]
    return ram_matrix


def simulate_instructions(ram_matrix, swap_matrix, algorithm):
    for instruction_count in range(1000):
        if instruction_count % 10 == 0:
            # Reset R bit every 10 instructions
            ram_matrix[:, 3] = 0

        instruction_number = np.random.randint(1, 101)

        if any(ram_matrix[:, 1] == instruction_number):

            index = np.where(ram_matrix[:, 1] == instruction_number)[0][0]
            ram_matrix[index, 3] = 1

            if np.random.rand() < 0.3:

                ram_matrix[index, 2] += 1
                ram_matrix[index, 4] = 1

        else:
          
    print("Matriz RAM final:\n", ram_matrix)
    print("\nMatriz SWAP final:\n", swap_matrix)


swap_matrix = initialize_swap_matrix()
ram_matrix = initialize_ram_matrix(swap_matrix)


print("Matriz RAM inicial:\n", ram_matrix)
print("\nMatriz SWAP inicial:\n", swap_matrix)


simulate_instructions(ram_matrix, swap_matrix, algorithm="NRU")
